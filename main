public enum Direction {
    N(0), NE(45), E(90), SE(135), S(180), SW(225), W(270), NW(315);

    Direction(final int degrees) {
        this.degrees = degrees;
    }

    private int getDegrees() {
        return this.degrees;
    }

    private final int degrees;

    public static Direction ofDegrees(int degrees) {
        if (degrees<0){
            for (Direction direction:Direction.values()) {
                if (direction.getDegrees()==360+degrees){
                    return Direction.valueOf(direction.name());
                }
            }
        }
        if (degrees>=360){
            while (degrees>=360){
                degrees-=360;
            }
        }
        for (Direction direction:Direction.values()) {
            if (direction.getDegrees()==degrees){
                return Direction.valueOf(direction.name());
            }
        }
        return null;
    }

    private static int getTMP(int degrees) {
        int k, tmp;
        if (degrees >= 0) {
            k = degrees / 360;
            tmp = degrees - k * 360;
        } else {
            k = Math.abs(degrees) / 360 + 1;
            tmp = degrees + k * 360;
        }
        return tmp;
    }

    public static Direction closestToDegrees(int degrees) {
        int t = getTMP(degrees);
        return Direction.values()[Math.round(1.0f * t / 45.0f)];
    }

    public Direction opposite() {
        return Direction.ofDegrees(degrees + 180);
    }

    public int differenceDegreesTo(Direction direction) {
        double r1, r2;
        if (this.getDegrees() > direction.getDegrees()) {
            r1 = this.getDegrees() - direction.getDegrees();
            r2 = (direction.getDegrees() - this.getDegrees() + 360);
        } else {
            r1 = direction.getDegrees() - this.getDegrees();
            r2 = this.getDegrees() - direction.getDegrees() + 360;
        }
        return (int) Math.min(Math.abs(r1), Math.abs(r2));
    }
}
